declare module 'vuex-pathify' {
  interface Options {
    [x: string]: any
    mapping: string
    strict: boolean
    cache: boolean
    deep: number
  }

  interface pathify {
    [x: string]: any
    options: Options
    plugin: (store: any) => void
    debug: () => void
  }

  interface members {
    [x: string]: any
    state: string
    getters: string
    actions: string
    mutations: string
  }

  interface formatters {
    [x: string]: any
    camel: (...args: any[]) => string
    snake: (...args: any[]) => any
    const: (...args: any[]) => any
  }

  var make: {
    [x: string]: any
    getters: (state: any) => any
    mutations: (state: any) => any
    actions: (state: any) => any
  }

  interface store {
    [x: string]: any
    getters: (state: any) => any
    mutations: (state: any) => any
    actions: (state: any) => any
  }

  interface vuex {
    [x: string]: any
    store: {
      [x: string]: any
      state: any
      commit: () => void
      dispatch: () => void
    }
  }

  /**
   * Map of default resolver functions
   */
  interface resolvers {
    [x: string]: any
    standard: (type: string, name: string, formatters$$1: any) => string
    simple: (type: any, name: any, formatters$$1: any) => any
  }

  /**
   * Creates multiple 2-way vue:vuex computed properties
   *
   * The function has multiple usages:
   *
   *  1. multiple properties from multiple modules
   *
   *     - @usage                                 ...sync({foo: 'module1/foo', bar: 'module2/bar'})
   *
   *     - @param   {Object}          props       a hash of key:path state/getter or commit/action references
   *
   *  2. multiple properties from a single module (object shorthand)
   *
   *     - @usage                                 ...sync('module', {foo: 'foo', bar: 'bar'})
   *
   *     - @param   {string}          path        a path to a module
   *     - @param   {Object}          props       a hash of key:prop state/getter or commit/action references
   *
   *  3. multiple properties from a single module (array shorthand)
   *
   *     - @usage                                 ...sync('module', ['foo', 'bar'])
   *
   *     - @param   {string}          path        a path to a module
   *     - @param   {Array}           props       an Array of state/getter or commit/action references
   *
   * Where different getter / setters need to be specified, pass getter and setter in
   * the same string, separating with a | character:
   *
   *     - @usage                                 ...sync('module', ['foo|updateFoo'])
   *
   * @param   {string|Object}         path        a path to a module, or a hash of state/getter or commit/action references
   * @param   {Object|Array}          props       a hash of state/getter or commit/action references
   * @param   {Function}              fnHandler   a callback function to create the handler
   * @param   {Function}              fnResolver
   * @returns {{set, get}}                        a hash of Objects
   */
  function makeHelper(
    path: any,
    props: any,
    fnHandler: Function,
    fnResolver: Function
  ): {
    set: any
    get: any
  }

  // -------------------------------------------------------------------------------------------------------------------
  // entry
  // -------------------------------------------------------------------------------------------------------------------

  function get(
    path: any,
    props: any
  ): {
    set: any
    get: any
  }

  function sync(
    path: any,
    props: any
  ): {
    set: any
    get: any
  }

  function call(
    path: any,
    props: any
  ): {
    set: any
    get: any
  }

  function commit(...args: any[]): void

  function dispatch(...args: any[]): void
  /**
   *
   * Helper function to generate a mixin that registers module and computed properties on component creation
   * @param path — The path to register the Vuex module on
   * @param module — The module definition to register when the
   * @param callback — A callback returning store members to be added to the component definition
   * @param options — Optional Vuex module registration options
   * @returns — The mixin
   */
  function registerModule(path: string | any[], module: any, callback: Function, options?: any): any

  /**
   * Helper function to mass-create default actions functions for an existing state object
   *
   * @param   {Object|Function|Array|String}   state   State object, state function, array or string of key names
   */
  function makeActions(state: any): any

  /**
   * Helper function to mass-create default mutation functions for an existing state object
   *
   * @param   {Object|Function|Array|String}   state   State object, state function, array or string of key names
   */
  function makeMutations(state: any): any

  /**
   * Helper function to mass-create default getter functions for an existing state object
   *
   * Note that you don't need to create top-level getter functions if using $store.get(...)
   *
   * @param   {Object|Function|Array|String}   state   State object, state function, array or string of key names
   */
  function makeGetters(state: any): any

  /**
   * Creates a getter function for the store, automatically targeting getters or state
   *
   * Also supports returning of sub-properties as part of the path
   *
   * @see documentation for more detail
   *
   * @param   {Object}    store       The store object
   * @param   {string}    path        The path to the target node
   * @param   {boolean}  [stateOnly]  An optional flag to get from state only (used when syncing)
   * @returns {*|Function}            The state value or getter function
   */
  function makeGetter(store: any, path: string, stateOnly?: boolean): any

  /**
   * Creates a setter function for the store, automatically targeting actions or mutations
   *
   * Also supports setting of sub-properties as part of the path
   *
   * @see documentation for more detail
   *
   * @param   {Object}  store   The store object
   * @param   {string}  path    The path to the target node
   * @returns {*|Promise}       The return value from the commit() or dispatch()
   */
  function makeSetter(store: any, path: string): any

  /**
   *  Creates a resolver object that caches properties and can resolve store member properties
   *  @param store — The Vuex store instance
   *  @param path — A pathify path to the store target, i.e. 'foo/bar
   *  @a — .b.c'
   *  @returns
   */
  function resolve(store: any, path: string): any

  /**
   * Internal function to resolve member name using configured mapping function
   *
   * @param   {string}  type  The member type, i.e. actions
   * @param   {string}  name  The supplied path member id, i.e. value
   * @returns {string}        The resolved member name, i.e. SET_VALUE
   */
  function resolveName(type: string, name: string): string

  /**
   * Helper function to resolve state properties from a wildcard path
   *
   * Note: this function traverses into the state object and any properties / sub-properties
   *
   * @param   {string}    path    A path with a wildcard at the end
   * @param   {object}    state   A state object on which to look up the sub-properties
   * @returns {string[]}          An array of paths
   */
  function resolveStates(path: string, state: any): string[]

  /**
   * Helper function to resolve getters, actions or mutations from a wildcard path
   *
   * Note: this function filters the top-level flat hash of members
   *
   * @param   {string}    path      A path with a wildcard at the end
   * @param   {object}    hash      A hash on which to filter by key => wildcard
   * @returns {string[]}            An array of paths
   */
  function resolveHandlers(path: string, hash: any): string[]

  /**
   * Helper function to convert Pathify path syntax paths to objects
   *
   * Handles:
   *
   * - string path
   * - object and array formats
   * - path + object/array format
   * - wildcards in path
   *
   * Returns a single string, or hash of key => paths
   *
   * @param   {string|object|array}  [path]       An optional path prefix
   * @param   {object}                props       An optional hash or array of paths / segments
   * @param   {function}              fnResolver  A function to resolve wildcards
   * @returns {object|string}
   */
  function makePaths(path?: any, props: any, fnResolver: Function): any | string

  /**
   * Helper function to concatenate two path components into a valid path
   *
   * Handles one or no "/" "@" or '.' characters in either string
   *
   * @param   {string}  path
   * @param   {string}  target
   * @returns {string}
   */
  function makePath(path: string, target: string): string
}
